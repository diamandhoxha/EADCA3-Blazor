@page "/"
@inject HttpClient Http

<h1>News</h1>

@if (news == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">

        <thead>
            <tr>
                <th>Name</th>
                <th>Author</th>
                <th>Title</th>
                <th>Description</th>
                <th>URL</th>
                <th>Image</th>
                <th>Published</th>
                <th>Content</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var rootdata in news.articles.ToList())
            {
                <tr>
                    <td>@rootdata.source.name</td>
                    <td>@rootdata.author</td>
                    <td>@rootdata.title</td>
                    <td>@rootdata.description</td>
                    <td>@rootdata.url</td>
                    <td>@rootdata.urlToImage"</td>
                    <td>@rootdata.publishedAt</td>
                    <td>@rootdata.content</td>
                </tr>
            }
        </tbody>

    </table>
}

@code {

    private Response news;

    public async Task Find()
    {
        //This options is necessary because the serializer of GetFromJson not recognize null values throwing a exception, in this particular case somes Ids is null
        System.Text.Json.JsonSerializerOptions options = new System.Text.Json.JsonSerializerOptions() { IgnoreNullValues = true };

        news = await Http.GetFromJsonAsync<Response>("https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=a15cbcc05e814709a1749fbec881c2c2", options);
    }

    protected override async Task OnInitializedAsync()
    {
        await Find();
    }

    public class Response
    {
        public string status { get; set; }
        public int totalResults { get; set; }
        //Work with arrays, Lists etc... But, Interfaces is best because parsing only the features to property not a instance a List.
        public IEnumerable<Root> articles { get; set; }
    }

    public class Source
    {
        public string id { get; set; }
        public string name { get; set; }
    }

    public class Root
    {
        public Source source { get; set; }
        public string author { get; set; }
        public string title { get; set; }
        public string description { get; set; }
        public string url { get; set; }
        public string urlToImage { get; set; }
        public DateTime publishedAt { get; set; }
        public string content { get; set; }
    }

}
